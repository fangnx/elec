{"ast":null,"code":"var _jsxFileName = \"/Users/fnx/GithubRepos/nxxinf-spotify-plus/client/src/components/CurrentSong/index.jsx\";\nimport React from 'react';\nimport './CurrentSong.css';\nimport { Card, Button, Image, Header, Transition } from 'semantic-ui-react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport spotifyIcon from '../../assets/icons/02_CMYK/02_PNG/Spotify_Icon_CMYK_Green.png';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CurrentSong extends React.Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const accessToken = params.access_token;\n\n    if (accessToken) {\n      spotifyApi.setAccessToken(accessToken);\n    } else {\n      console.log('No Spotify access token present');\n    }\n\n    this.state = {\n      isLoggedIn: !!accessToken,\n      isReady: false,\n      currentSong: '',\n      songImg: ''\n    };\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q);\n\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n\n    return hashParams;\n  }\n\n  getCurrentSong() {\n    spotifyApi.getMyCurrentPlaybackState((_, res) => {\n      if (res) {\n        this.setState({\n          isReady: true,\n          currentSong: res.item.name,\n          songImg: res.item.album.images[0].url\n        });\n      } else {\n        this.setState({\n          isReady: true,\n          currentSong: 'No Song',\n          songImg: spotifyIcon\n        });\n      }\n    });\n  }\n\n  componentWillMount() {\n    this.getCurrentSong();\n  }\n\n  render() {\n    const _this$state = this.state,\n          isReady = _this$state.isReady,\n          currentSong = _this$state.currentSong,\n          songImg = _this$state.songImg;\n    console.log(this.state);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Transition, {\n      visible: isReady,\n      animation: \"fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, isReady ? React.createElement(Card, {\n      className: \"currentSong-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Image, {\n      src: songImg,\n      wrapped: true,\n      className: \"currentSong-img\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, currentSong))) : ''));\n  }\n\n}\n\nexport default CurrentSong;","map":{"version":3,"sources":["/Users/fnx/GithubRepos/nxxinf-spotify-plus/client/src/components/CurrentSong/index.jsx"],"names":["React","Card","Button","Image","Header","Transition","SpotifyWebApi","spotifyIcon","spotifyApi","CurrentSong","Component","constructor","params","getHashParams","accessToken","access_token","setAccessToken","console","log","state","isLoggedIn","isReady","currentSong","songImg","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getCurrentSong","getMyCurrentPlaybackState","_","res","setState","item","name","album","images","url","componentWillMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './CurrentSong.css';\nimport { Card, Button, Image, Header, Transition } from 'semantic-ui-react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport spotifyIcon from '../../assets/icons/02_CMYK/02_PNG/Spotify_Icon_CMYK_Green.png';\n\nconst spotifyApi = new SpotifyWebApi();\n\nclass CurrentSong extends React.Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const accessToken = params.access_token;\n    if (accessToken) {\n      spotifyApi.setAccessToken(accessToken);\n    } else {\n      console.log('No Spotify access token present');\n    }\n\n    this.state = {\n      isLoggedIn: !!accessToken,\n      isReady: false,\n      currentSong: '',\n      songImg: ''\n    };\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q);\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getCurrentSong() {\n    spotifyApi.getMyCurrentPlaybackState((_, res) => {\n      if (res) {\n        this.setState({\n          isReady: true,\n          currentSong: res.item.name,\n          songImg: res.item.album.images[0].url\n        });\n      } else {\n        this.setState({\n          isReady: true,\n          currentSong: 'No Song',\n          songImg: spotifyIcon\n        });\n      }\n    });\n  }\n\n  componentWillMount() {\n    this.getCurrentSong();\n  }\n\n  render() {\n    const { isReady, currentSong, songImg } = this.state;\n    console.log(this.state);\n\n    return (\n      <React.Fragment>\n        <Transition visible={isReady} animation=\"fade\">\n          {isReady ? (\n            <Card className=\"currentSong-card\">\n              <Image src={songImg} wrapped className=\"currentSong-img\" />\n              <Card.Content>\n                {/* <Button as=\"a\" href=\"http://localhost:8888\" primary>\n                  Log in to Spotify\n                </Button> */}\n\n                <Header>{currentSong}</Header>\n              </Card.Content>\n            </Card>\n          ) : (\n            ''\n          )}\n        </Transition>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CurrentSong;\n"]},"metadata":{},"sourceType":"module"}